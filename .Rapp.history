c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Zhen")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
getwd()
ls()
x <- 9
ls()
list.files()
?lish.files
?list.files
args(list.files)
list.files("old.dir")
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
getwd()
list.files()
file.exists()
info()
file.exists(mytest.R)
files.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
getwd()
dir()
dir("testdir2")
getwd()
unlink("testdir2.R", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd()
setwd(old.dir)
getwd()
unlink("testdir", recursive = T)
unlink("testdir", recursive = TRUE)
swirl()
weekdays()
quarters
quarters()
Sys.time()
x <- Sys.time()
y <- as.POSIXlt(x)
y
x
names(unclass(y))
names(x)
names(unclass(x))
y$mday
y$hour
y$mon
y$year
y$wday
y$yday
y$isdst
y$zone
y$fmtoff
y$sec
y$fmtoff
y$sec
x
p <- as.POSIXlt(x)
p
p$sec
datastring <- c("January 10, 2016 10:40", "December 9, 2016 9:10")
x <- strptime(datastring, "%B %d, %Y %H:%M")
x
x <- strptime(datastring, "%d %B, %Y %H:%M")
x
x <- strptime(datastring, "%B %d, %Y %H:%M")
x
class(x)
?strptime
cube <- function(x,n) {x^3}
cube(3)
x <- 1:10
if(x>5){x <- 0}
f <- function(x) {g <- function(y){y+z} z<- 4 x }
f <- function(x) {g <- function(y){y+z} z<- 4 x + g(x) }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z <- 9
f(3)
a <- c(1:100)
dim(a) <- c(2,2,10,10)
dim(a) <- c(2,2,10)
dim(a) <- c(2,5,10)
dim(a) <- c(2,5,10,10)
a <- c(1:1000)
dim(a) <- c(2,5,5,10)
dim(a) <- c(2,5,10,10)
a
?tallpy
?tapply
?file.list
?file
library(datasets)
data(iris)
?iris
ls()
str(iris)
a<- sapply(iris$Sepal.Length, mean)
a
mean(Sepal.Length)
mean(iris$Sepal.Length)
?apply
apply(iris, 1:4, mean)
colMeans(iris)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
?apply
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
?sapply
?tapply
mtcars
apply(mtcars$1, 2, mean)
apply(mtcars$mpg, 2, mean)
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
split <- split(mtcars$hp, mtcars$cyl)
split
data.frame(split)
sapply(split, mean)
a <- sapply(split, mean)
class(a)
abs
abs(a[3]-a[1])
debug(ls)
ls
ls()
2
1
2
3
iris
str(iris)
mean(iris[,1])
apply(iris[,1], 2, mean)
apply(iris$Sepal.Length, 2, mean)
a<- split(iris[,1], iris[,5])
a
sapply(a, mean)
apply(iris[,1:4],2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cy, mean)
ls
debug(ls)
ls()
a <- 0
fun <- function(){
a <- 0
fun <- function(x){
a <- a + x
}
fun(1)
a
fun <- funciton(x){
fun <- function(x){
a <- a + 1
a}
fun(1)
fun(2)
fun(3)
fun(0)
fun()
fun <- function(x){
a <- a + x
a}
fun(2)
a
fun <- function(x){
a <<- a + x
a}
fun(12)
a
get <- function()
get
get <- function() x
get
?$
?%$%
$
getmean <- function() 1
getmean
getmean <-function() 5
getmean(1)
getmean
x = matrix()
x
setwd("DS_R_W3/ProgrammingAssignment2/")
source("cachematrix.R")
source("trialcache.R")
j <- makeCacheMatrix(matrix(1:100, 10, 10))
j$get()
cacheSolve(j)
j <- makeCacheMatrix(matrix(1:16, 4, 4))
cacheSolve(j)
j <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(j)
cacheSolve(j)
j <- makeCacheMatrix(matrix(rnorm(100), 10, 10))
j$get
j$get()
cacheS
cacheSolve(j)
j <- makeCacheMatrix(matrix(rnorm(1000), 100, 100))
cacheSolve(j)
j <- makeCacheMatrix(matrix(rnorm(1000000), 1000, 1000))
cacheSolve(j)
cacheSolve(j)
cacheSolve(j)
