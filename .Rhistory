star_wars_matrix
sw_matrix
all
all_movies
all_movies
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
ls()
list.files()
file.path("mytest3.R")
file.path("folder1","folder2")
?file.path
?dir.create
getwd()
dir.create(file.path("testdir2","testdir3"),recursive=T)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink(testdir2)
unlink("testdir2")
unlink("testdir2",recurvise=TURE)
unlink("testdir2",recursive=TURE)
unlink("testdir2", recursive = TRUE)
setwd()
setwd(old.path)
setwd("old.path")
setwd("old.dir")
setwd(old.dir)
unlink("testdir")
unlink("testdir",recursive=TRUE)
swirl()
5+7
x <- 5+7
x
y <- x -3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
5+7
X <- 5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*z+100
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.r")
file.exists("mytest.R")
file.info("mytest.r")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
>?dir.create
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collpase=" ")
paste(my_char, collpase = "")
paste(my_char, collpase = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Zhen")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
1
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
?sample
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na, TRUE)
sum(my_na)
print(my_data)
my_data
0/0
Inf - Inf
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <- matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
pateints <- c("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
class(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
indentical(my_matrix,my_matrix2)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x> 0]
x
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA).
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vectors) <- c("foo","bar","norf")
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
swirl()
swirl()
a <- c("a","b","c")
b <- c(1,2,3)
swirl()
TURE == TRUE
TRUE == TRUE
(FALSE == TRUE) ==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6 !=8 && 4>3.9
isTRUE(6>4)
identical("twins","twins")
xor(1==1,1==2)
xor(1==1,2==2)
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(int>0)
all(ints>0)
help("[[")
help.start()
example([])
example([)
example("[")
??[
??start
??help.search
help.search
getwd()
fruits = c(5,10,1,20)
names(fruits) = c("orage","banana","apple", "peach")
fruits[c("orange","apple")]
fruits[c("orage","apple")]
?names
fruits
a <- list(1,2,3,4,5)
a
names(a) <- c("a","b","c","d","e")
a
a <- matrix(1:10, nrow=2, ncol=5)
a
colnames(a) <- c("a","b","c","d","e")
a
cbind(c("yi","er"), a)
data.frame(a)
a
class(a)
mode(a)
length(a)
x = c(12 + 3i)
mode(x)
class(x)
x = c("a")
mode(x)
class(a)
?as.something
?as
x = 5
x
y = as(x, Class="character")
y
as.character(x)
y
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("my first function!")
boring_function("My first function!")
boring_function()
boring_function
submit
submit()
my_mean(c(4,5,10))
submit
submit
submit
submit()
remainder(5)
remainder11,5
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[-1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram(R is fun)
telegram("R is fun")
help(...)
help("...")
?...
?`...`
??`...`
submit()
submit()
submit()
mad_libs(Brsbane, tiny, banana)
mad_libs("Brisbane", "tiny", "banana")
submit()
submit()
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
a <- rnorm(1:50)
plot(a)
b <- matrix(1:12, nrow=3,ncol=4)
plot(b)
class(b)
attributes(b)
states <- c("qld","nsw","vic","act","tas","nt","wa","sa")
statesf <- factor(states)
states
statesf
length(statesf)
states <- c("qld","nsw","vic","act","tas","nt","wa","sa", "qld","qld","qld")
statesf
statesf <- factor(states)
statesf
length(levels(statesf))
?seq_along
a <- c(1:10)
a
seq_along(a)
b = c("a","b","c")
seq_along(b)
example(seq_along)
c(1:10, by = 0.5)
seq(1:10, by=0.5)
vector(1:10)
1:10
1:10, by=0.5
seq(1,5,by=0.1)
a = c(1:10, by=0.1)
a
codes <- c("a","b","c","d","e")
names(a[1:5], codes)
a[1:5]
a
a[-1]
a[length(a)]
?names
names(a[1:5], codes)
names(a[1:5]) <- codes
a
names(a)
names(a[1:5]) <- c("a","b","c","d","e")
a
names(a[length(a)])
a
a <- c(1,2,3,4,5)
b <- c("a","b","c","d","e")
names(a) <- b
a
names(a)
swirl()
?set.seed
set.seed(1)
print(z)
swilr()
swirl()
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
d1 <- Sys.Date()
class(d1)
?unclass
unclass()
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y % H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
debug(ls)
ls
x = numeric()
class(x)
x = vector()
class(x)
dump()
x = matrix()
class(x)
x = list()
class(x)
getwd
getwd()
setwd("DS_R_W3/")
ls()
dir()
setwd("ProgrammingAssignment2/")
dir()
cachematrix.R
im
R/cachematrix.R
source("cachematrix.R")
source("cachematrix.R")
mymatrix = matrix(rnorm(100), nrow=10, ncol=10)
mymatrix
mymatrix = matrix(1:100, nrow=10, ncol=10)
mymatrix
solve(mymatrix)
solve(mymatrix,...)
solve(mymatrix...)
solve(mymatrix)
makeCacheMatrix(mymatrix)
cacheSolve
cacheSolve(mymatrix)
mymatrix
class(mymatrix)
mymatrix$get()
makeCacheMatrix$set(mymatrix)
mymatrix <- makeCacheMatrix(mymatrix)
mymatrix
mymatrix$get()
mymatrix$get()
mymatrix <- makeCacheMatrix(matrix(1:100, nrow=10, ncol=10))
mymatrix
mymatrix$get()
mymatrix$getinverse()
cacheSolve(mymatrix)
mymatrix
mymatrix$setinverse()
my_matrix$getinverse()
mymatrix$getinverse()
cacheSolve(mymatrix)
mymatrix$get()
mymatrix$set()
solve(mymatrix$get())
mymatrix <- matrix(1:4, 2,2)
cacheSolve(mymatrix)
mymatrix <- makeCacheMatrix(matrix(1:4, 2,2))
cacheSolve(mymatrix)
source("trialcache.R")
mymatrix <- makeCacheMatrix(matrix(1:4, 2,2))
mymatri$get()
mymatrix$get()
cacheSolve(mymatrix)
